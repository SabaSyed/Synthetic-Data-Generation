[
    {
        "expression": "5*sin(a**3*b**2*c**2*y*z**3) + 3",
        "code": "import numpy as np\nfrom sympy import sin\ndef _lambdifygenerated(c, a, b, z, y):\n    return 5*sin(a**3*b**2*c**2*y*z**3) + 3\n"
    },
    {
        "expression": "2*sin(a**3*c**3*x**3*z**2) + 5*cos(a**3*c*x**3*z) + 3*csc(a**3*c**3*x**2*z) + 4",
        "code": "import numpy as np\nfrom sympy import cos, sin, csc\ndef _lambdifygenerated(c, a, z, x):\n    return 2*sin(a**3*c**3*x**3*z**2) + 5*cos(a**3*c*x**3*z) + 3*(sin(a**3*c**3*x**2*z)**(-1.0)) + 4\n"
    },
    {
        "expression": "4*tan(a**3*b*x**3*y**2*z) + 3",
        "code": "import numpy as np\nfrom sympy import tan\ndef _lambdifygenerated(b, a, y, x, z):\n    return 4*tan(a**3*b*x**3*y**2*z) + 3\n"
    },
    {
        "expression": "3*sin(a**2*b*z) + 5*csc(a**2*b**2*z) + 4",
        "code": "import numpy as np\nfrom sympy import sin, csc\ndef _lambdifygenerated(z, a, b):\n    return 3*sin(a**2*b*z) + 5*(sin(a**2*b**2*z)**(-1.0)) + 4\n"
    },
    {
        "expression": "4*cot(a*b**3*c**3*x**2*y**3*z) + 3",
        "code": "import numpy as np\nfrom sympy import cot\ndef _lambdifygenerated(x, z, c, b, y, a):\n    return 4*(tan(a*b**3*c**3*x**2*y**3*z)**(-1.0)) + 3\n"
    },
    {
        "expression": "3*cot(a*b**2*c*x**2*y**2*z**3) + 5",
        "code": "import numpy as np\nfrom sympy import cot\ndef _lambdifygenerated(a, x, z, b, y, c):\n    return 3*(tan(a*b**2*c*x**2*y**2*z**3)**(-1.0)) + 5\n"
    },
    {
        "expression": "3*tan(a*b**2*c*x**2*y**3*z**2) + 5*tan(a*b**3*c**2*x*y*z**2) + tan(a**3*b**3*c**2*x**3*y*z) + 2",
        "code": "import numpy as np\nfrom sympy import tan\ndef _lambdifygenerated(z, a, c, x, b, y):\n    return 3*tan(a*b**2*c*x**2*y**3*z**2) + 5*tan(a*b**3*c**2*x*y*z**2) + tan(a**3*b**3*c**2*x**3*y*z) + 2\n"
    },
    {
        "expression": "4*sin(a*b**2*c*x**2*y*z) + 3",
        "code": "import numpy as np\nfrom sympy import sin\ndef _lambdifygenerated(a, z, y, b, x, c):\n    return 4*sin(a*b**2*c*x**2*y*z) + 3\n"
    },
    {
        "expression": "2*sin(a**2*b**2*c**2*x**2*z) + csc(a*b**3*c**2*x**3*z**3) + 2",
        "code": "import numpy as np\nfrom sympy import sin, csc\ndef _lambdifygenerated(a, z, x, b, c):\n    return 2*sin(a**2*b**2*c**2*x**2*z) + (sin(a*b**3*c**2*x**3*z**3)**(-1.0)) + 2\n"
    },
    {
        "expression": "3*tan(a**2*b**3*c**2*x**3*y**3*z) + 3*csc(a*b**3*c*x**3*y**3*z**2) + 2*csc(a**2*b**2*c*x*y**3*z) + 5",
        "code": "import numpy as np\nfrom sympy import tan, csc\ndef _lambdifygenerated(x, b, c, a, z, y):\n    return 3*tan(a**2*b**3*c**2*x**3*y**3*z) + 3*(sin(a*b**3*c*x**3*y**3*z**2)**(-1.0)) + 2*(sin(a**2*b**2*c*x*y**3*z)**(-1.0)) + 5\n"
    },
    {
        "expression": "2*sec(a**2*b*c*y**2*z**3) + 2",
        "code": "import numpy as np\nfrom sympy import sec\ndef _lambdifygenerated(b, z, a, y, c):\n    return 2*(cos(a**2*b*c*y**2*z**3)**(-1.0)) + 2\n"
    },
    {
        "expression": "3*sin(c**3*x) + 5*cos(c**2*x**2) + 4*sec(c*x**2) + 4",
        "code": "import numpy as np\nfrom sympy import cos, sin, sec\ndef _lambdifygenerated(x, c):\n    return 3*sin(c**3*x) + 5*cos(c**2*x**2) + 4*(cos(c*x**2)**(-1.0)) + 4\n"
    },
    {
        "expression": "4*tan(b**3*c*x**2*z**2) + 4*cot(b*c**2*x*z**3) + 3*csc(b*c**3*x*z**2) + 1",
        "code": "import numpy as np\nfrom sympy import cot, tan, csc\ndef _lambdifygenerated(x, b, c, z):\n    return 4*tan(b**3*c*x**2*z**2) + 4*(tan(b*c**2*x*z**3)**(-1.0)) + 3*(sin(b*c**3*x*z**2)**(-1.0)) + 1\n"
    },
    {
        "expression": "2*csc(a*b**2*c**2*x*y**3*z) + 3",
        "code": "import numpy as np\nfrom sympy import csc\ndef _lambdifygenerated(y, a, c, x, z, b):\n    return 2*(sin(a*b**2*c**2*x*y**3*z)**(-1.0)) + 3\n"
    },
    {
        "expression": "cos(a**2*b**3*c*x**2*y**2*z**2) + 3*tan(a**3*b**2*c**2*x**2*y*z**2) + 2*cot(a**2*b**3*c**3*x**3*y**3*z**2) + 1",
        "code": "import numpy as np\nfrom sympy import cos, cot, tan\ndef _lambdifygenerated(a, z, x, c, y, b):\n    return cos(a**2*b**3*c*x**2*y**2*z**2) + 3*tan(a**3*b**2*c**2*x**2*y*z**2) + 2*(tan(a**2*b**3*c**3*x**3*y**3*z**2)**(-1.0)) + 1\n"
    },
    {
        "expression": "2*sin(c**3*x*y*z) + 5*sec(c**2*x*y**3*z**3) + 4",
        "code": "import numpy as np\nfrom sympy import sin, sec\ndef _lambdifygenerated(y, c, z, x):\n    return 2*sin(c**3*x*y*z) + 5*(cos(c**2*x*y**3*z**3)**(-1.0)) + 4\n"
    },
    {
        "expression": "5*sin(b**3*c**3*x) + 4*cos(b**3*c**2*x) + 1",
        "code": "import numpy as np\nfrom sympy import cos, sin\ndef _lambdifygenerated(b, x, c):\n    return 5*sin(b**3*c**3*x) + 4*cos(b**3*c**2*x) + 1\n"
    },
    {
        "expression": "5*sec(a**3*c*x**2*y*z**3) + 1",
        "code": "import numpy as np\nfrom sympy import sec\ndef _lambdifygenerated(c, a, y, x, z):\n    return 5*(cos(a**3*c*x**2*y*z**3)**(-1.0)) + 1\n"
    },
    {
        "expression": "tan(a*b**3*c**3*y**3*z**3) + 5*csc(a**2*b*c*y*z**2) + 5*sec(a**3*b*c*y*z**2) + 3",
        "code": "import numpy as np\nfrom sympy import tan, sec, csc\ndef _lambdifygenerated(y, b, c, z, a):\n    return tan(a*b**3*c**3*y**3*z**3) + 5*(sin(a**2*b*c*y*z**2)**(-1.0)) + 5*(cos(a**3*b*c*y*z**2)**(-1.0)) + 3\n"
    },
    {
        "expression": "4*cos(a*b*x**2*y**2*z) + cot(a**2*b*x*y**2*z) + 4*sec(a**3*b**2*x**3*y**3*z) + 2",
        "code": "import numpy as np\nfrom sympy import cos, cot, sec\ndef _lambdifygenerated(b, z, a, y, x):\n    return 4*cos(a*b*x**2*y**2*z) + (tan(a**2*b*x*y**2*z)**(-1.0)) + 4*(cos(a**3*b**2*x**3*y**3*z)**(-1.0)) + 2\n"
    },
    {
        "expression": "4*cos(a**2*b**2*c**2*x*y**2*z**3) + tan(a**2*b**2*c*x**3*y**3*z**2) + 3*cot(a**3*b*c**2*x**3*y**2*z**2) + 4",
        "code": "import numpy as np\nfrom sympy import cos, cot, tan\ndef _lambdifygenerated(b, y, a, z, c, x):\n    return 4*cos(a**2*b**2*c**2*x*y**2*z**3) + tan(a**2*b**2*c*x**3*y**3*z**2) + 3*(tan(a**3*b*c**2*x**3*y**2*z**2)**(-1.0)) + 4\n"
    },
    {
        "expression": "5*cos(a**2*b**3*c**3*x**2*y**2*z**2) + 4*cos(a**3*b**2*c**2*x*y**3*z) + 4*cot(a**2*b*c**2*x*y**3*z**3) + 4",
        "code": "import numpy as np\nfrom sympy import cos, cot\ndef _lambdifygenerated(c, x, y, a, z, b):\n    return 5*cos(a**2*b**3*c**3*x**2*y**2*z**2) + 4*cos(a**3*b**2*c**2*x*y**3*z) + 4*(tan(a**2*b*c**2*x*y**3*z**3)**(-1.0)) + 4\n"
    },
    {
        "expression": "sin(c**3*y**3) + 5",
        "code": "import numpy as np\nfrom sympy import sin\ndef _lambdifygenerated(c, y):\n    return sin(c**3*y**3) + 5\n"
    },
    {
        "expression": "cot(a**2*b*x**3) + 2*csc(a*b**3*x**3) + 3*sec(a*b**3*x**2) + 4",
        "code": "import numpy as np\nfrom sympy import cot, sec, csc\ndef _lambdifygenerated(b, a, x):\n    return (tan(a**2*b*x**3)**(-1.0)) + 2*(sin(a*b**3*x**3)**(-1.0)) + 3*(cos(a*b**3*x**2)**(-1.0)) + 4\n"
    },
    {
        "expression": "cot(a**2*c*z**2) + 4*csc(a*c**3*z**3) + csc(a**3*c*z**3) + 4",
        "code": "import numpy as np\nfrom sympy import cot, csc\ndef _lambdifygenerated(z, a, c):\n    return (tan(a**2*c*z**2)**(-1.0)) + 4*(sin(a*c**3*z**3)**(-1.0)) + (sin(a**3*c*z**3)**(-1.0)) + 4\n"
    },
    {
        "expression": "4*sin(b**3*c**2*x**3*y*z**2) + 3*cot(b*c**3*x**3*y**2*z**3) + 5*cot(b**2*c**2*x**2*y*z**3) + 4",
        "code": "import numpy as np\nfrom sympy import cot, sin\ndef _lambdifygenerated(c, b, y, z, x):\n    return 4*sin(b**3*c**2*x**3*y*z**2) + 3*(tan(b*c**3*x**3*y**2*z**3)**(-1.0)) + 5*(tan(b**2*c**2*x**2*y*z**3)**(-1.0)) + 4\n"
    },
    {
        "expression": "3*sin(b**2*c**3) + 2",
        "code": "import numpy as np\nfrom sympy import sin\ndef _lambdifygenerated(b, c):\n    return 3*sin(b**2*c**3) + 2\n"
    },
    {
        "expression": "3*cos(b**3*c**3*x**2*y**2*z) + 3",
        "code": "import numpy as np\nfrom sympy import cos\ndef _lambdifygenerated(y, c, x, b, z):\n    return 3*cos(b**3*c**3*x**2*y**2*z) + 3\n"
    },
    {
        "expression": "2*tan(b*c*x*y**2*z) + 2*csc(b*c**3*x**3*y**2*z**3) + 5",
        "code": "import numpy as np\nfrom sympy import tan, csc\ndef _lambdifygenerated(x, z, b, y, c):\n    return 2*tan(b*c*x*y**2*z) + 2*(sin(b*c**3*x**3*y**2*z**3)**(-1.0)) + 5\n"
    },
    {
        "expression": "5*cot(a*b**2*c**2*x**3*y**2*z) + 4*sec(a*b*c**3*x**2*y**2*z**2) + 1",
        "code": "import numpy as np\nfrom sympy import cot, sec\ndef _lambdifygenerated(z, b, x, a, y, c):\n    return 5*(tan(a*b**2*c**2*x**3*y**2*z)**(-1.0)) + 4*(cos(a*b*c**3*x**2*y**2*z**2)**(-1.0)) + 1\n"
    },
    {
        "expression": "4*sin(b**2*c) + 4*cos(b**2*c**3) + 4*csc(b**3*c**2) + 3",
        "code": "import numpy as np\nfrom sympy import cos, sin, csc\ndef _lambdifygenerated(c, b):\n    return 4*sin(b**2*c) + 4*cos(b**2*c**3) + 4*(sin(b**3*c**2)**(-1.0)) + 3\n"
    },
    {
        "expression": "5*sin(a*b**3*c**3*x**2*y**2*z**2) + 2*tan(a**3*b**2*c**2*x**3*y*z) + 2*cot(a**3*b*c**3*x*y**2*z**3) + 1",
        "code": "import numpy as np\nfrom sympy import cot, tan, sin\ndef _lambdifygenerated(x, a, y, z, c, b):\n    return 5*sin(a*b**3*c**3*x**2*y**2*z**2) + 2*tan(a**3*b**2*c**2*x**3*y*z) + 2*(tan(a**3*b*c**3*x*y**2*z**3)**(-1.0)) + 1\n"
    },
    {
        "expression": "2*cot(a**3*b**2*c**3) + 2*csc(a**3*b*c**3) + 2*csc(a**3*b**2*c**2) + 5",
        "code": "import numpy as np\nfrom sympy import cot, csc\ndef _lambdifygenerated(c, a, b):\n    return 2*(tan(a**3*b**2*c**3)**(-1.0)) + 2*(sin(a**3*b*c**3)**(-1.0)) + 2*(sin(a**3*b**2*c**2)**(-1.0)) + 5\n"
    },
    {
        "expression": "cos(b**2*x**2) + 4*cos(b**3*x**3) + 5*cot(b**2*x**3) + 2",
        "code": "import numpy as np\nfrom sympy import cos, cot\ndef _lambdifygenerated(x, b):\n    return cos(b**2*x**2) + 4*cos(b**3*x**3) + 5*(tan(b**2*x**3)**(-1.0)) + 2\n"
    },
    {
        "expression": "5*sin(b**2*c**2*z**2) + 3*sin(b**3*c*z) + tan(b**2*c**3*z) + 5",
        "code": "import numpy as np\nfrom sympy import sin, tan\ndef _lambdifygenerated(z, c, b):\n    return 5*sin(b**2*c**2*z**2) + 3*sin(b**3*c*z) + tan(b**2*c**3*z) + 5\n"
    },
    {
        "expression": "4*csc(x**2*y**3*z**3) + 3",
        "code": "import numpy as np\nfrom sympy import csc\ndef _lambdifygenerated(x, y, z):\n    return 4*(sin(x**2*y**3*z**3)**(-1.0)) + 3\n"
    },
    {
        "expression": "tan(b**3*x**3) + 3*cot(b**2*x**2) + 2*csc(b**3*x**3) + 2",
        "code": "import numpy as np\nfrom sympy import cot, tan, csc\ndef _lambdifygenerated(b, x):\n    return tan(b**3*x**3) + 3*(tan(b**2*x**2)**(-1.0)) + 2*(sin(b**3*x**3)**(-1.0)) + 2\n"
    },
    {
        "expression": "4*cos(a*z**3) + 2*tan(a**3*z**3) + 3",
        "code": "import numpy as np\nfrom sympy import cos, tan\ndef _lambdifygenerated(z, a):\n    return 4*cos(a*z**3) + 2*tan(a**3*z**3) + 3\n"
    },
    {
        "expression": "tan(a**2*b**3*x**2*y*z) + 4*cot(a**3*b**2*x**3*y**3*z**2) + 3*sec(a**2*b**2*x**2*y**3*z**2) + 1",
        "code": "import numpy as np\nfrom sympy import cot, tan, sec\ndef _lambdifygenerated(z, y, a, b, x):\n    return tan(a**2*b**3*x**2*y*z) + 4*(tan(a**3*b**2*x**3*y**3*z**2)**(-1.0)) + 3*(cos(a**2*b**2*x**2*y**3*z**2)**(-1.0)) + 1\n"
    },
    {
        "expression": "4*cot(a**3*b**2*c**2*x*y*z**3) + 2*csc(a*b**2*c**2*x**3*y**3*z) + 4*sec(a*b**3*c**2*x*y**2*z**3) + 1",
        "code": "import numpy as np\nfrom sympy import cot, sec, csc\ndef _lambdifygenerated(a, b, x, c, y, z):\n    return 4*(tan(a**3*b**2*c**2*x*y*z**3)**(-1.0)) + 2*(sin(a*b**2*c**2*x**3*y**3*z)**(-1.0)) + 4*(cos(a*b**3*c**2*x*y**2*z**3)**(-1.0)) + 1\n"
    },
    {
        "expression": "3*tan(x**2*y) + 5",
        "code": "import numpy as np\nfrom sympy import tan\ndef _lambdifygenerated(y, x):\n    return 3*tan(x**2*y) + 5\n"
    },
    {
        "expression": "2*csc(a**2*b**2*c*x*y**2*z**2) + 3*csc(a**2*b**3*c*x**2*y**2*z) + 3*sec(a*b**2*c**3*x**3*y**2*z) + 5",
        "code": "import numpy as np\nfrom sympy import sec, csc\ndef _lambdifygenerated(b, a, y, c, z, x):\n    return 2*(sin(a**2*b**2*c*x*y**2*z**2)**(-1.0)) + 3*(sin(a**2*b**3*c*x**2*y**2*z)**(-1.0)) + 3*(cos(a*b**2*c**3*x**3*y**2*z)**(-1.0)) + 5\n"
    },
    {
        "expression": "4*cot(x**3*z**2) + 5*csc(x**2*z) + 1",
        "code": "import numpy as np\nfrom sympy import cot, csc\ndef _lambdifygenerated(x, z):\n    return 4*(tan(x**3*z**2)**(-1.0)) + 5*(sin(x**2*z)**(-1.0)) + 1\n"
    },
    {
        "expression": "2*cos(a*b*y**3*z) + 4*tan(a**2*b*y**3*z) + 3*sec(a**3*b**2*y**3*z**2) + 2",
        "code": "import numpy as np\nfrom sympy import cos, tan, sec\ndef _lambdifygenerated(z, y, b, a):\n    return 2*cos(a*b*y**3*z) + 4*tan(a**2*b*y**3*z) + 3*(cos(a**3*b**2*y**3*z**2)**(-1.0)) + 2\n"
    },
    {
        "expression": "3*sin(a**2*c*x*y**2*z) + 3*csc(a*c**2*x**3*y**2*z**2) + 4",
        "code": "import numpy as np\nfrom sympy import sin, csc\ndef _lambdifygenerated(y, c, a, z, x):\n    return 3*sin(a**2*c*x*y**2*z) + 3*(sin(a*c**2*x**3*y**2*z**2)**(-1.0)) + 4\n"
    },
    {
        "expression": "5*sin(a**2*b**3*c*y**3*z**2) + 1",
        "code": "import numpy as np\nfrom sympy import sin\ndef _lambdifygenerated(a, c, y, z, b):\n    return 5*sin(a**2*b**3*c*y**3*z**2) + 1\n"
    },
    {
        "expression": "5*sin(a*b**3*y**3) + 3*tan(a*b**3*y**3) + 5",
        "code": "import numpy as np\nfrom sympy import sin, tan\ndef _lambdifygenerated(b, a, y):\n    return 5*sin(a*b**3*y**3) + 3*tan(a*b**3*y**3) + 5\n"
    },
    {
        "expression": "cos(a**2*b*c**2) + 2*cos(a**3*b*c**3) + 1",
        "code": "import numpy as np\nfrom sympy import cos\ndef _lambdifygenerated(c, b, a):\n    return cos(a**2*b*c**2) + 2*cos(a**3*b*c**3) + 1\n"
    },
    {
        "expression": "3*csc(a*c*x*z) + 2",
        "code": "import numpy as np\nfrom sympy import csc\ndef _lambdifygenerated(z, a, c, x):\n    return 3*(sin(a*c*x*z)**(-1.0)) + 2\n"
    },
    {
        "expression": "4*tan(a**3*c**2*x**2*y) + cot(a**3*c*x**3*y) + 1",
        "code": "import numpy as np\nfrom sympy import cot, tan\ndef _lambdifygenerated(x, a, y, c):\n    return 4*tan(a**3*c**2*x**2*y) + (tan(a**3*c*x**3*y)**(-1.0)) + 1\n"
    },
    {
        "expression": "3*cos(c*x*y**2) + 2*sec(c**3*x*y) + 5",
        "code": "import numpy as np\nfrom sympy import cos, sec\ndef _lambdifygenerated(y, x, c):\n    return 3*cos(c*x*y**2) + 2*(cos(c**3*x*y)**(-1.0)) + 5\n"
    },
    {
        "expression": "csc(c**3*x*y**2*z**2) + 5",
        "code": "import numpy as np\nfrom sympy import csc\ndef _lambdifygenerated(c, y, x, z):\n    return (sin(c**3*x*y**2*z**2)**(-1.0)) + 5\n"
    },
    {
        "expression": "3*cot(a*c**2*y**3*z**3) + 3*csc(a*c*y*z**2) + 2",
        "code": "import numpy as np\nfrom sympy import cot, csc\ndef _lambdifygenerated(c, z, y, a):\n    return 3*(tan(a*c**2*y**3*z**3)**(-1.0)) + 3*(sin(a*c*y*z**2)**(-1.0)) + 2\n"
    },
    {
        "expression": "4*csc(a**3*z) + 1",
        "code": "import numpy as np\nfrom sympy import csc\ndef _lambdifygenerated(z, a):\n    return 4*(sin(a**3*z)**(-1.0)) + 1\n"
    },
    {
        "expression": "4*tan(a**2*b**2*z**3) + 4*cot(a*b**2*z) + csc(a**2*b**3*z**3) + 3",
        "code": "import numpy as np\nfrom sympy import cot, tan, csc\ndef _lambdifygenerated(z, a, b):\n    return 4*tan(a**2*b**2*z**3) + 4*(tan(a*b**2*z)**(-1.0)) + (sin(a**2*b**3*z**3)**(-1.0)) + 3\n"
    },
    {
        "expression": "cos(a*b*x**2*y**2*z) + 5*cot(a*b*x*y**2*z**2) + 5",
        "code": "import numpy as np\nfrom sympy import cos, cot\ndef _lambdifygenerated(a, y, x, z, b):\n    return cos(a*b*x**2*y**2*z) + 5*(tan(a*b*x*y**2*z**2)**(-1.0)) + 5\n"
    },
    {
        "expression": "4*tan(a**2*b**2*c*z**2) + 1",
        "code": "import numpy as np\nfrom sympy import tan\ndef _lambdifygenerated(z, b, a, c):\n    return 4*tan(a**2*b**2*c*z**2) + 1\n"
    },
    {
        "expression": "3*cos(x*y**2*z) + 4",
        "code": "import numpy as np\nfrom sympy import cos\ndef _lambdifygenerated(x, z, y):\n    return 3*cos(x*y**2*z) + 4\n"
    },
    {
        "expression": "3*csc(b**2*c**3*y**3*z**3) + sec(b**2*c**3*y**2*z) + 1",
        "code": "import numpy as np\nfrom sympy import sec, csc\ndef _lambdifygenerated(c, z, y, b):\n    return 3*(sin(b**2*c**3*y**3*z**3)**(-1.0)) + (cos(b**2*c**3*y**2*z)**(-1.0)) + 1\n"
    },
    {
        "expression": "3*tan(a**2*b**2*c**3*x*y*z**3) + 5*cot(a**2*b*c*x*y**3*z) + 5*cot(a**2*b*c**2*x**2*y*z**2) + 4",
        "code": "import numpy as np\nfrom sympy import cot, tan\ndef _lambdifygenerated(a, b, x, z, c, y):\n    return 3*tan(a**2*b**2*c**3*x*y*z**3) + 5*(tan(a**2*b*c*x*y**3*z)**(-1.0)) + 5*(tan(a**2*b*c**2*x**2*y*z**2)**(-1.0)) + 4\n"
    },
    {
        "expression": "3*tan(b**3*c**2*x*y) + cot(b**3*c**2*x**3*y**2) + 1",
        "code": "import numpy as np\nfrom sympy import cot, tan\ndef _lambdifygenerated(c, x, b, y):\n    return 3*tan(b**3*c**2*x*y) + (tan(b**3*c**2*x**3*y**2)**(-1.0)) + 1\n"
    },
    {
        "expression": "3*cos(b*x**3*y**2) + 3",
        "code": "import numpy as np\nfrom sympy import cos\ndef _lambdifygenerated(b, x, y):\n    return 3*cos(b*x**3*y**2) + 3\n"
    },
    {
        "expression": "4*cos(a**2*b*c**3*y**3) + 5*tan(a*b**2*c*y**2) + 2*sec(a*b*c**2*y**3) + 5",
        "code": "import numpy as np\nfrom sympy import cos, tan, sec\ndef _lambdifygenerated(y, c, b, a):\n    return 4*cos(a**2*b*c**3*y**3) + 5*tan(a*b**2*c*y**2) + 2*(cos(a*b*c**2*y**3)**(-1.0)) + 5\n"
    },
    {
        "expression": "cos(a*c*x*y**2*z**3) + 2*cot(a*c*x**2*y**3*z) + 5*cot(a**2*c*x**3*y**3*z) + 1",
        "code": "import numpy as np\nfrom sympy import cos, cot\ndef _lambdifygenerated(c, x, z, y, a):\n    return cos(a*c*x*y**2*z**3) + 2*(tan(a*c*x**2*y**3*z)**(-1.0)) + 5*(tan(a**2*c*x**3*y**3*z)**(-1.0)) + 1\n"
    },
    {
        "expression": "2*csc(a**3*b**2*c**2*x**2*y) + 5*sec(a**2*b*c**2*x*y) + sec(a**3*b**2*c**2*x*y**3) + 4",
        "code": "import numpy as np\nfrom sympy import sec, csc\ndef _lambdifygenerated(c, b, a, y, x):\n    return 2*(sin(a**3*b**2*c**2*x**2*y)**(-1.0)) + 5*(cos(a**2*b*c**2*x*y)**(-1.0)) + (cos(a**3*b**2*c**2*x*y**3)**(-1.0)) + 4\n"
    },
    {
        "expression": "3*cot(a*z**3) + 4*csc(a*z**2) + 3*sec(a**2*z**2) + 5",
        "code": "import numpy as np\nfrom sympy import cot, sec, csc\ndef _lambdifygenerated(z, a):\n    return 3*(tan(a*z**3)**(-1.0)) + 4*(sin(a*z**2)**(-1.0)) + 3*(cos(a**2*z**2)**(-1.0)) + 5\n"
    },
    {
        "expression": "4*sin(a**2*b*c**3*x**2*y**3*z) + 2*cot(a**2*b*c**3*x**2*y**2*z) + 4",
        "code": "import numpy as np\nfrom sympy import sin, cot\ndef _lambdifygenerated(z, c, x, b, a, y):\n    return 4*sin(a**2*b*c**3*x**2*y**3*z) + 2*(tan(a**2*b*c**3*x**2*y**2*z)**(-1.0)) + 4\n"
    },
    {
        "expression": "cot(a**2*b*c*x*y**3*z**3) + 2*csc(a*b**3*c**3*x**3*y*z**3) + 2*sec(a**2*b**2*c**2*x**2*y**3*z**3) + 4",
        "code": "import numpy as np\nfrom sympy import cot, sec, csc\ndef _lambdifygenerated(a, y, b, x, z, c):\n    return (tan(a**2*b*c*x*y**3*z**3)**(-1.0)) + 2*(sin(a*b**3*c**3*x**3*y*z**3)**(-1.0)) + 2*(cos(a**2*b**2*c**2*x**2*y**3*z**3)**(-1.0)) + 4\n"
    },
    {
        "expression": "5*cos(a*b*x*y**3*z) + 4*cot(a**3*b**2*x*y**3*z**2) + 5*sec(a*b*x**3*y*z**2) + 3",
        "code": "import numpy as np\nfrom sympy import cos, cot, sec\ndef _lambdifygenerated(z, b, x, y, a):\n    return 5*cos(a*b*x*y**3*z) + 4*(tan(a**3*b**2*x*y**3*z**2)**(-1.0)) + 5*(cos(a*b*x**3*y*z**2)**(-1.0)) + 3\n"
    },
    {
        "expression": "3*sin(b*c*x*y**3) + 5*csc(b**3*c**2*x**3*y) + 4*sec(b**3*c**3*x*y**2) + 3",
        "code": "import numpy as np\nfrom sympy import sin, sec, csc\ndef _lambdifygenerated(y, x, b, c):\n    return 3*sin(b*c*x*y**3) + 5*(sin(b**3*c**2*x**3*y)**(-1.0)) + 4*(cos(b**3*c**3*x*y**2)**(-1.0)) + 3\n"
    },
    {
        "expression": "3*sec(b**2*x**3*y**3*z**2) + 2",
        "code": "import numpy as np\nfrom sympy import sec\ndef _lambdifygenerated(x, b, y, z):\n    return 3*(cos(b**2*x**3*y**3*z**2)**(-1.0)) + 2\n"
    },
    {
        "expression": "sin(a**3*b*c*x**2*y**2*z) + 3*tan(a**2*b**2*c**3*x**2*y**2*z) + tan(a**2*b**3*c**3*x*y*z**2) + 5",
        "code": "import numpy as np\nfrom sympy import sin, tan\ndef _lambdifygenerated(a, z, b, x, y, c):\n    return sin(a**3*b*c*x**2*y**2*z) + 3*tan(a**2*b**2*c**3*x**2*y**2*z) + tan(a**2*b**3*c**3*x*y*z**2) + 5\n"
    },
    {
        "expression": "4*cot(a**3*c*x*y**2*z) + 3",
        "code": "import numpy as np\nfrom sympy import cot\ndef _lambdifygenerated(y, x, c, a, z):\n    return 4*(tan(a**3*c*x*y**2*z)**(-1.0)) + 3\n"
    },
    {
        "expression": "5*cos(a*b**3*c*x**3*y*z) + 2*tan(a**2*b**2*c**2*x*y**2*z**2) + 3*sec(a*b*c*x**3*y*z) + 3",
        "code": "import numpy as np\nfrom sympy import cos, tan, sec\ndef _lambdifygenerated(y, a, b, z, c, x):\n    return 5*cos(a*b**3*c*x**3*y*z) + 2*tan(a**2*b**2*c**2*x*y**2*z**2) + 3*(cos(a*b*c*x**3*y*z)**(-1.0)) + 3\n"
    },
    {
        "expression": "sin(a*b*x*y*z**2) + 3*csc(a**3*b**3*x*y**3*z) + 5*sec(a**3*b**2*x**3*y**2*z**2) + 4",
        "code": "import numpy as np\nfrom sympy import sin, sec, csc\ndef _lambdifygenerated(a, b, y, z, x):\n    return sin(a*b*x*y*z**2) + 3*(sin(a**3*b**3*x*y**3*z)**(-1.0)) + 5*(cos(a**3*b**2*x**3*y**2*z**2)**(-1.0)) + 4\n"
    },
    {
        "expression": "3*sin(b**2*c*y**3*z**2) + 2*cot(b*c**2*y*z) + 2",
        "code": "import numpy as np\nfrom sympy import cot, sin\ndef _lambdifygenerated(y, z, b, c):\n    return 3*sin(b**2*c*y**3*z**2) + 2*(tan(b*c**2*y*z)**(-1.0)) + 2\n"
    },
    {
        "expression": "5*sin(a*b**3*c**3*x**2*z**3) + 4*cos(a**3*b*c*x*z) + 4*csc(a**2*b**3*c*x**2*z**3) + 5",
        "code": "import numpy as np\nfrom sympy import cos, sin, csc\ndef _lambdifygenerated(b, c, z, x, a):\n    return 5*sin(a*b**3*c**3*x**2*z**3) + 4*cos(a**3*b*c*x*z) + 4*(sin(a**2*b**3*c*x**2*z**3)**(-1.0)) + 5\n"
    },
    {
        "expression": "cos(x**2*y) + 1",
        "code": "import numpy as np\nfrom sympy import cos\ndef _lambdifygenerated(x, y):\n    return cos(x**2*y) + 1\n"
    },
    {
        "expression": "sin(a*c*x**2*y**3*z**2) + 5*sec(a**3*c*x*y**3*z**2) + 3",
        "code": "import numpy as np\nfrom sympy import sin, sec\ndef _lambdifygenerated(a, y, x, z, c):\n    return sin(a*c*x**2*y**3*z**2) + 5*(cos(a**3*c*x*y**3*z**2)**(-1.0)) + 3\n"
    },
    {
        "expression": "5*sec(a**3*b**3*c*x*z**2) + 2",
        "code": "import numpy as np\nfrom sympy import sec\ndef _lambdifygenerated(x, c, z, b, a):\n    return 5*(cos(a**3*b**3*c*x*z**2)**(-1.0)) + 2\n"
    },
    {
        "expression": "3*tan(a**2*b*x**3*y**3) + cot(a**3*b*x*y) + 4*csc(a**3*b*x**3*y) + 2",
        "code": "import numpy as np\nfrom sympy import cot, tan, csc\ndef _lambdifygenerated(y, a, b, x):\n    return 3*tan(a**2*b*x**3*y**3) + (tan(a**3*b*x*y)**(-1.0)) + 4*(sin(a**3*b*x**3*y)**(-1.0)) + 2\n"
    },
    {
        "expression": "5*cos(c**2*x**2*y**2*z**2) + 3",
        "code": "import numpy as np\nfrom sympy import cos\ndef _lambdifygenerated(c, y, z, x):\n    return 5*cos(c**2*x**2*y**2*z**2) + 3\n"
    },
    {
        "expression": "sin(a*c**3*x**3*y**3*z**3) + 4*cot(a**2*c*x*y*z) + 4*sec(a*c*x*y**3*z**2) + 3",
        "code": "import numpy as np\nfrom sympy import cot, sin, sec\ndef _lambdifygenerated(c, a, z, x, y):\n    return sin(a*c**3*x**3*y**3*z**3) + 4*(tan(a**2*c*x*y*z)**(-1.0)) + 4*(cos(a*c*x*y**3*z**2)**(-1.0)) + 3\n"
    },
    {
        "expression": "2*sin(b*y**3) + 4*cot(b**3*y**3) + 2*csc(b*y**3) + 5",
        "code": "import numpy as np\nfrom sympy import sin, cot, csc\ndef _lambdifygenerated(y, b):\n    return 2*sin(b*y**3) + 4*(tan(b**3*y**3)**(-1.0)) + 2*(sin(b*y**3)**(-1.0)) + 5\n"
    },
    {
        "expression": "2*tan(a**2*c) + 5*cot(a*c) + 4",
        "code": "import numpy as np\nfrom sympy import cot, tan\ndef _lambdifygenerated(a, c):\n    return 2*tan(a**2*c) + 5*(tan(a*c)**(-1.0)) + 4\n"
    },
    {
        "expression": "4*cot(a**3*b**3*c**2*y*z) + 2*csc(a*b*c**3*y**2*z**2) + 5*csc(a**2*b*c**3*y**2*z) + 2",
        "code": "import numpy as np\nfrom sympy import cot, csc\ndef _lambdifygenerated(z, b, y, c, a):\n    return 4*(tan(a**3*b**3*c**2*y*z)**(-1.0)) + 2*(sin(a*b*c**3*y**2*z**2)**(-1.0)) + 5*(sin(a**2*b*c**3*y**2*z)**(-1.0)) + 2\n"
    },
    {
        "expression": "tan(a**2*b*c**2*x**3*y*z**3) + 5*sec(a**3*b*c**2*x*y**3*z**3) + 5*sec(a**3*b**2*c*x**2*y**2*z**2) + 2",
        "code": "import numpy as np\nfrom sympy import tan, sec\ndef _lambdifygenerated(x, a, b, z, y, c):\n    return tan(a**2*b*c**2*x**3*y*z**3) + 5*(cos(a**3*b*c**2*x*y**3*z**3)**(-1.0)) + 5*(cos(a**3*b**2*c*x**2*y**2*z**2)**(-1.0)) + 2\n"
    },
    {
        "expression": "5*sin(a**3*b*c**2*y**2) + 4*cot(a**3*b**3*c**2*y**3) + 5*sec(a**3*b**3*c*y) + 4",
        "code": "import numpy as np\nfrom sympy import cot, sin, sec\ndef _lambdifygenerated(c, y, a, b):\n    return 5*sin(a**3*b*c**2*y**2) + 4*(tan(a**3*b**3*c**2*y**3)**(-1.0)) + 5*(cos(a**3*b**3*c*y)**(-1.0)) + 4\n"
    },
    {
        "expression": "sin(a**3*b**3*c**3*x**2*y*z**2) + 5*sec(a**3*b**2*c*x**3*y**3*z**2) + 5",
        "code": "import numpy as np\nfrom sympy import sin, sec\ndef _lambdifygenerated(b, x, a, y, c, z):\n    return sin(a**3*b**3*c**3*x**2*y*z**2) + 5*(cos(a**3*b**2*c*x**3*y**3*z**2)**(-1.0)) + 5\n"
    },
    {
        "expression": "5*csc(b*x**3) + sec(b*x) + 3*sec(b**3*x**3) + 5",
        "code": "import numpy as np\nfrom sympy import sec, csc\ndef _lambdifygenerated(x, b):\n    return 5*(sin(b*x**3)**(-1.0)) + (cos(b*x)**(-1.0)) + 3*(cos(b**3*x**3)**(-1.0)) + 5\n"
    },
    {
        "expression": "4*cot(a**2*b**2*c**2*x**2*y**3*z**2) + 4*sec(a**3*b**2*c**3*x*y*z) + 5",
        "code": "import numpy as np\nfrom sympy import cot, sec\ndef _lambdifygenerated(b, y, a, z, x, c):\n    return 4*(tan(a**2*b**2*c**2*x**2*y**3*z**2)**(-1.0)) + 4*(cos(a**3*b**2*c**3*x*y*z)**(-1.0)) + 5\n"
    },
    {
        "expression": "cot(a**2*b*c**3*x**2*y**2*z**3) + cot(a**3*b**2*c*x*y**2*z) + 4*sec(a*b*c**2*x*y**3*z**2) + 3",
        "code": "import numpy as np\nfrom sympy import cot, sec\ndef _lambdifygenerated(z, c, b, x, y, a):\n    return (tan(a**2*b*c**3*x**2*y**2*z**3)**(-1.0)) + (tan(a**3*b**2*c*x*y**2*z)**(-1.0)) + 4*(cos(a*b*c**2*x*y**3*z**2)**(-1.0)) + 3\n"
    },
    {
        "expression": "2*sin(b*c**2*x**2*y) + sin(b**3*c**2*x**3*y**3) + 5*tan(b**2*c**3*x*y) + 2",
        "code": "import numpy as np\nfrom sympy import sin, tan\ndef _lambdifygenerated(y, x, c, b):\n    return 2*sin(b*c**2*x**2*y) + sin(b**3*c**2*x**3*y**3) + 5*tan(b**2*c**3*x*y) + 2\n"
    },
    {
        "expression": "2*sin(a**2*c**3) + 1",
        "code": "import numpy as np\nfrom sympy import sin\ndef _lambdifygenerated(a, c):\n    return 2*sin(a**2*c**3) + 1\n"
    },
    {
        "expression": "4*cos(a**2*b**3*x**2*y) + 5*tan(a**3*b**3*x*y) + 3",
        "code": "import numpy as np\nfrom sympy import cos, tan\ndef _lambdifygenerated(x, b, a, y):\n    return 4*cos(a**2*b**3*x**2*y) + 5*tan(a**3*b**3*x*y) + 3\n"
    },
    {
        "expression": "4*sec(a**2*c**3*x**2*y) + 2",
        "code": "import numpy as np\nfrom sympy import sec\ndef _lambdifygenerated(x, c, a, y):\n    return 4*(cos(a**2*c**3*x**2*y)**(-1.0)) + 2\n"
    },
    {
        "expression": "5*csc(a**2*b**3*x**2*z**2) + 4*csc(a**3*b**2*x*z) + 5",
        "code": "import numpy as np\nfrom sympy import csc\ndef _lambdifygenerated(z, b, x, a):\n    return 5*(sin(a**2*b**3*x**2*z**2)**(-1.0)) + 4*(sin(a**3*b**2*x*z)**(-1.0)) + 5\n"
    },
    {
        "expression": "2*tan(x**2*y**2) + 5",
        "code": "import numpy as np\nfrom sympy import tan\ndef _lambdifygenerated(y, x):\n    return 2*tan(x**2*y**2) + 5\n"
    },
    {
        "expression": "4*sin(a**3*b*c*x**2*y**2) + 4*tan(a*b**2*c**2*x**2*y) + csc(a**2*b**2*c*x**2*y) + 3",
        "code": "import numpy as np\nfrom sympy import sin, tan, csc\ndef _lambdifygenerated(b, a, c, x, y):\n    return 4*sin(a**3*b*c*x**2*y**2) + 4*tan(a*b**2*c**2*x**2*y) + (sin(a**2*b**2*c*x**2*y)**(-1.0)) + 3\n"
    },
    {
        "expression": "3*csc(c**3*y) + 1",
        "code": "import numpy as np\nfrom sympy import csc\ndef _lambdifygenerated(c, y):\n    return 3*(sin(c**3*y)**(-1.0)) + 1\n"
    }
]